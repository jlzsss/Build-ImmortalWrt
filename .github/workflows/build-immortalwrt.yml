name: Build-ImmortalWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  # push:
   schedule:
      - cron: "0 17 * * *"

permissions:
  packages: write
  contents: write
  actions: write
  pull-requests: write

env:
  # 新增 CCache 配置
  CCACHE_DIR: /mnt/ccache
  CCACHE_MAXSIZE: 5G
  CCACHE_COMPRESS: true
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  CHOOSE_VERSION: v24.10.2
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  DIY_P3_SH: diy-part3.sh
  SCKEY: ${{ secrets.SCKEY }}
  GH_TOKEN: ${{ github.token }}
  PUSHPLUS_TOKEN: ${{ secrets.PUSHPLUS_TOKEN }}
  FREE_UP_DISK: true
  UPLOAD_FILES: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  prepare:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: WeChat notification
        run: |
          curl -s -o /dev/null http://www.pushplus.plus/send --data "token=${{ secrets.PUSHPLUS_TOKEN }}&content=开始编译OpenWrt"
          # curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=开始编译OpenWrt
    
      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker image prune -a -f
          sudo -E rm -rf /usr/share/dotnet /etc/apt/sources.list.d/* /var/cache/apt/archives /usr/local/share/boost /usr/local/go* /usr/local/lib/android /opt/ghc
          sudo -E apt-get -y purge azure-cli* docker* ghc* llvm* firefox google* dotnet* mysql* 
          sudo mv ${GITHUB_WORKSPACE}/sources-24.04.list /etc/apt/sources.list.d/
          sudo -E apt-get update -y
          sudo -E apt-get full-upgrade -y
          sudo -E apt-get install -y --allow-downgrades build-essential flex bison cmake clang g++ gawk gcc-multilib g++-multilib gettext git-man=1:2.43.* git gnutls-dev libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch upx-ucl autoconf automake curl asciidoc binutils bzip2 lib32gcc-s1 libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils haveged scons libpython3-dev rename qemu-utils jq gh libarchive-tools
          sudo -E apt-get autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          sudo chmod 777 /workdir
          df -hT

      # 新增 CCache 初始化
      - name: Setup CCache
        run: |
          sudo mkdir -p $CCACHE_DIR
          sudo chmod 777 $CCACHE_DIR
          ccache --set-config=max_size=$CCACHE_MAXSIZE
          ccache -s

      - name: Clone source code
        working-directory: /workdir
        run: |
          git clone -b $REPO_BRANCH --single-branch $REPO_URL openwrt
          ln -sf /workdir/openwrt ${{ github.workspace }}/openwrt

      - name: Choose openwrt version
        run: |
          cd openwrt
          git checkout $CHOOSE_VERSION

      - name: Free up disk space
        if: env.FREE_UP_DISK == 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo swapoff /mnt/swapfile
          sudo rm -rf /mnt/swapfile
          sudo chmod 777 /mnt
          sudo mkdir -p -m 777 openwrt/build_dir /mnt/openwrt/dl /mnt/openwrt/staging_dir /mnt/openwrt/build_dir /mnt/openwrt/tmp /mnt/ccache
          ln -sf /mnt/openwrt/dl openwrt/dl
          ln -sf /mnt/openwrt/tmp openwrt/tmp
          ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir
          ln -sf /mnt/openwrt/build_dir openwrt/build_dir
          df -hT

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Load own configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P3_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P3_SH
          mv ${GITHUB_WORKSPACE}/patches/002-dapnet-gateway_Conf.cpp.patch ${GITHUB_WORKSPACE}/openwrt/feeds/kenzok8/dapnet-gateway/patches
          find "${GITHUB_WORKSPACE}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%' | patch -d '${GITHUB_WORKSPACE}/openwrt' -p1 --forward"

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Download package
        id: package
        run: |
          cd openwrt
          make download -j16
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Multi-thread compile with CCache
        id: Multi-thread
        env:
          CC: "ccache gcc"
          CXX: "ccache g++"
        run: |
          cd openwrt
          echo -e "$(($(nproc) + 1)) thread compile with CCache"
          make -j$(($(nproc) + 1)) tools/compile CC="$CC" CXX="$CXX"
          make -j$(($(nproc) + 1)) toolchain/compile CC="$CC" CXX="$CXX"
          make -j$(($(nproc) + 1)) target/linux/compile CC="$CC" CXX="$CXX"
          make -j$(($(nproc) + 1)) package/{node,python3,golang,php8,ruby,perl,rust,jq,docker}/compile CC="$CC" CXX="$CXX"
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          ccache -s
          df -hT
          
      - name: Single-thread compile
        id: Single-thread
        if: failure()
        env:
          CC: "ccache gcc"
          CXX: "ccache g++"
        run: |
          cd openwrt
          make -j1 tools/compile V=s CC="$CC" CXX="$CXX"
          make -j1 toolchain/compile V=s CC="$CC" CXX="$CXX"
          make -j1 target/linux/compile V=s CC="$CC" CXX="$CXX"
          make -j1 package/{node,python3,golang,php8,ruby,perl,rust,jq,docker}/compile V=s CC="$CC" CXX="$CXX"
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          ccache -s

      - name: Compress directory
        run: |
          sudo rm -rf /workdir/openwrt/dl /workdir/openwrt/tmp /workdir/openwrt/build_dir /workdir/openwrt/staging_dir
          bsdtar -czlf staging_dir.tar.gz /mnt/openwrt/staging_dir && sudo rm -rf /mnt/openwrt/staging_dir
          bsdtar -czlf build_dir.tar.gz /mnt/openwrt/build_dir && sudo rm -rf /mnt/openwrt/build_dir
          bsdtar -czlf tmp.tar.gz /mnt/openwrt/tmp && sudo rm -rf /mnt/openwrt/tmp
          bsdtar -czlf dl.tar.gz /mnt/openwrt/dl && sudo rm -rf /mnt/openwrt/dl
          bsdtar -czlf openwrt.tar.gz /workdir/openwrt && sudo rm -rf /workdir/openwrt
          df -hT

      - name: Store build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prepare-build-output
          path: |
            staging_dir.tar.gz
            build_dir.tar.gz
            dl.tar.gz
            tmp.tar.gz
            openwrt.tar.gz

      - name: WeChat notification
        if: steps.Multi-thread.outputs.status == 'success' || steps.Single-thread.outputs.status == 'success' && !cancelled() && job.status == 'success'
        run: |
          curl -s -o /dev/null http://www.pushplus.plus/send --data "token=${{ secrets.PUSHPLUS_TOKEN }}&content=OpenWrt第一部分编译成功"
          # curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=OpenWrt第一部分编译成功

      - name: WeChat notification
        if: failure() && !cancelled()
        run: |
          curl -s -o /dev/null http://www.pushplus.plus/send --data "token=${{ secrets.PUSHPLUS_TOKEN }}&content=OpenWrt第一部分编译失败"
          # curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=OpenWrt第一部分编译失败

  build1:
    needs: prepare
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker image prune -a -f
          sudo -E rm -rf /usr/share/dotnet /etc/apt/sources.list.d/* /var/cache/apt/archives /usr/local/share/boost /usr/local/go* /usr/local/lib/android /opt/ghc
          sudo -E apt-get -y purge azure-cli* docker* ghc* llvm* firefox google* dotnet* mysql*
          sudo mv ${GITHUB_WORKSPACE}/sources-24.04.list /etc/apt/sources.list.d/
          sudo -E apt-get update -y
          sudo -E apt-get full-upgrade -y
          sudo -E apt-get install -y --allow-downgrades build-essential flex bison cmake clang g++ gawk gcc-multilib g++-multilib gettext git-man=1:2.43.* git gnutls-dev libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch upx-ucl autoconf automake curl asciidoc binutils bzip2 lib32gcc-s1 libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils haveged scons libpython3-dev rename qemu-utils jq libarchive-tools
          sudo -E apt-get autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          sudo chmod 777 /workdir
          df -hT

      # 新增 CCache 初始化
      - name: Setup CCache
        run: |
          sudo mkdir -p $CCACHE_DIR
          sudo chmod 777 $CCACHE_DIR
          ccache --set-config=max_size=$CCACHE_MAXSIZE
          ccache -s

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: prepare-build-output
          path: /workdir

      - name: WeChat notification
        working-directory: /workdir
        run: |
          cd /workdir
          mkdir -p openwrt
          bsdtar -xzf openwrt.tar.gz -C /workdir/openwrt --strip-components=2 && rm openwrt.tar.gz
          ln -sf /workdir/openwrt ${{ github.workspace }}/openwrt
          curl -s -o /dev/null http://www.pushplus.plus/send --data "token=${{ secrets.PUSHPLUS_TOKEN }}&content=OpenWrt开始编译第二部分"
          # curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=OpenWrt开始编译第二部分

      - name: Free up disk space
        if: env.FREE_UP_DISK == 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo swapoff /mnt/swapfile
          sudo rm -rf /mnt/swapfile
          sudo chmod 777 /mnt
          sudo mkdir -p -m 777 openwrt/build_dir /mnt/openwrt/dl /mnt/openwrt/staging_dir /mnt/openwrt/build_dir /mnt/openwrt/tmp /mnt/ccache
          ln -sf /mnt/openwrt/dl openwrt/dl
          ln -sf /mnt/openwrt/tmp openwrt/tmp
          ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir
          ln -sf /mnt/openwrt/build_dir openwrt/build_dir
          df -hT

      - name: Unzip artifact
        run: |
          cd /workdir && bsdtar -xzf build_dir.tar.gz -C /mnt/openwrt/build_dir --strip-components=3 && rm build_dir.tar.gz
          cd /workdir && bsdtar -xzf dl.tar.gz -C /mnt/openwrt/dl --strip-components=3 && rm dl.tar.gz
          cd /workdir && bsdtar -xzf staging_dir.tar.gz -C /mnt/openwrt/staging_dir --strip-components=3 && rm staging_dir.tar.gz
          cd /workdir && bsdtar -xzf tmp.tar.gz -C /mnt/openwrt/tmp --strip-components=3 && rm tmp.tar.gz

      - name: Move files
        run: |
          # 使用rsync同步目录并清理原目录
          rsync -av /workdir/openwrt/dl/ /mnt/openwrt/dl/ && rm -rf /workdir/openwrt/dl
          rsync -av /workdir/openwrt/tmp/ /mnt/openwrt/tmp/ && rm -rf /workdir/openwrt/tmp
          rsync -av /workdir/openwrt/build_dir/ /mnt/openwrt/build_dir/ && rm -rf /workdir/openwrt/build_dir
          rsync -av /workdir/openwrt/staging_dir/ /mnt/openwrt/staging_dir/ && rm -rf /workdir/openwrt/staging_dir
          # 创建符号链接保持路径映射
          ln -sf /mnt/openwrt/dl /workdir/openwrt/dl
          ln -sf /mnt/openwrt/tmp /workdir/openwrt/tmp
          ln -sf /mnt/openwrt/build_dir /workdir/openwrt/build_dir
          ln -sf /mnt/openwrt/staging_dir /workdir/openwrt/staging_dir
          df -hT

      - name: Fix kernel config missing issue
        env:
          CC: "ccache gcc"
          CXX: "ccache g++"
        run: |
           cd openwrt
           # 从配置文件中获取 Linux 内核版本号
           LINUX_VERSION=$(grep '^CONFIG_LINUX_' .config | sed -r 's/^CONFIG_LINUX_([0-9\.]+)=y/\1/')
           KERNEL_CONFIG_DIR="build_dir/target-x86_64_musl/linux-x86_64/linux-${LINUX_VERSION}"
           # 确保 kernel 配置文件存在
           if [ ! -f "${KERNEL_CONFIG_DIR}/.config" ]; then
           echo "Kernel .config 文件缺失，尝试重新生成"
           make target/linux/clean
           make package/linux/clean
           make -j$(($(nproc) + 1)) target/linux/compile CC="$CC" CXX="$CXX"
           make -j$(($(nproc) + 1)) package/linux/compile CC="$CC" CXX="$CXX"
           ccache -s
           fi

      - name: Multi-thread compile with CCache
        id: Multi-thread
        env:
          CC: "ccache gcc"
          CXX: "ccache g++"
        run: |
          cd openwrt
          echo -e "$(($(nproc) + 1)) thread compile with CCache"
          make -j$(($(nproc) + 1)) package/luci/compile BUILD_PACKAGES=y CC="$CC" CXX="$CXX"
          make -j$(($(nproc) + 1)) package/{dnscrypt-proxy2,luci-app-qbittorrent,luci-app-netspeedtest,luci-app-passwall,luci-app-shadowsocksr,luci-app-vssr,luci-app-adblock-fast,luci-app-adbyby-plus,luci-app-adguardhome,luci-app-transmission,luci-app-aria2,luci-app-bypass,luci-app-homeproxy,luci-app-kcptun,luci-app-openclash,luci-app-passwall2,luci-app-smartdns,luci-app-ssr-plus,luci-app-store,luci-app-trojan,luci-app-v2ray,luci-app-v2raya}/compile BUILD_PACKAGES=y CC="$CC" CXX="$CXX"
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          ccache -s
          df -hT
          
      - name: Single-thread compile
        id: Single-thread
        if: failure()
        env:
          CC: "ccache gcc"
          CXX: "ccache g++"
        run: |
          cd openwrt
          make -j1 package/luci/compile BUILD_PACKAGES=y V=s CC="$CC" CXX="$CXX"
          make -j1 package/{dnscrypt-proxy2,luci-app-qbittorrent,luci-app-netspeedtest,luci-app-passwall,luci-app-shadowsocksr,luci-app-vssr,luci-app-adblock-fast,luci-app-adbyby-plus,luci-app-adguardhome,luci-app-transmission,luci-app-aria2,luci-app-bypass,luci-app-homeproxy,luci-app-kcptun,luci-app-openclash,luci-app-passwall2,luci-app-smartdns,luci-app-ssr-plus,luci-app-store,luci-app-trojan,luci-app-v2ray,luci-app-v2raya}/compile BUILD_PACKAGES=y V=s CC="$CC" CXX="$CXX"
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          ccache -s

      - name: Compress directory
        run: |
          sudo rm -rf /workdir/openwrt/dl /workdir/openwrt/tmp /workdir/openwrt/build_dir /workdir/openwrt/staging_dir
          bsdtar -czlf staging_dir.tar.gz /mnt/openwrt/staging_dir && sudo rm -rf /mnt/openwrt/staging_dir
          bsdtar -czlf build_dir.tar.gz /mnt/openwrt/build_dir && sudo rm -rf /mnt/openwrt/build_dir
          bsdtar -czlf tmp.tar.gz /mnt/openwrt/tmp && sudo rm -rf /mnt/openwrt/tmp
          bsdtar -czlf dl.tar.gz /mnt/openwrt/dl && sudo rm -rf /mnt/openwrt/dl
          bsdtar -czlf openwrt.tar.gz /workdir/openwrt && sudo rm -rf /workdir/openwrt
          df -hT

      - name: Store build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build1-build-output
          path: |
            staging_dir.tar.gz
            build_dir.tar.gz
            dl.tar.gz
            tmp.tar.gz
            openwrt.tar.gz

      - name: WeChat notification
        if: steps.Multi-thread.outputs.status == 'success' || steps.Single-thread.outputs.status == 'success' && !cancelled() && job.status == 'success'
        run: |
          curl -s -o /dev/null http://www.pushplus.plus/send --data "token=${{ secrets.PUSHPLUS_TOKEN }}&content=OpenWrt第二部分编译成功"
          # curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=OpenWrt第二部分编译成功

      - name: WeChat notification
        if: failure() && !cancelled()
        run: |
          curl -s -o /dev/null http://www.pushplus.plus/send --data "token=${{ secrets.PUSHPLUS_TOKEN }}&content=OpenWrt第二部分编译失败"
          # curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=OpenWrt第二部分编译失败

  build2:
    needs: build1
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker image prune -a -f
          sudo -E rm -rf /usr/share/dotnet /etc/apt/sources.list.d/* /var/cache/apt/archives /usr/local/share/boost /usr/local/go* /usr/local/lib/android /opt/ghc
          sudo -E apt-get -y purge azure-cli* docker* ghc* llvm* firefox google* dotnet* mysql*
          sudo mv ${GITHUB_WORKSPACE}/sources-24.04.list /etc/apt/sources.list.d/
          sudo -E apt-get update -y
          sudo -E apt-get full-upgrade -y
          sudo -E apt-get install -y --allow-downgrades build-essential flex bison cmake clang g++ gawk gcc-multilib g++-multilib gettext git-man=1:2.43.* git gnutls-dev libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch upx-ucl autoconf automake curl asciidoc binutils bzip2 lib32gcc-s1 libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils haveged scons libpython3-dev rename qemu-utils jq libarchive-tools
          sudo -E apt-get autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          sudo chmod 777 /workdir
          df -hT

      # 新增 CCache 初始化
      - name: Setup CCache
        run: |
          sudo mkdir -p $CCACHE_DIR
          sudo chmod 777 $CCACHE_DIR
          ccache --set-config=max_size=$CCACHE_MAXSIZE
          ccache -s

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build1-build-output
          path: /workdir

      - name: WeChat notification
        working-directory: /workdir
        run: |
          cd /workdir
          mkdir -p openwrt
          bsdtar -xzf openwrt.tar.gz -C /workdir/openwrt --strip-components=2 && rm openwrt.tar.gz
          ln -sf /workdir/openwrt ${{ github.workspace }}/openwrt
          curl -s -o /dev/null http://www.pushplus.plus/send --data "token=${{ secrets.PUSHPLUS_TOKEN }}&content=OpenWrt开始编译第三部分"
          # curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=OpenWrt开始编译第三部分

      - name: Free up disk space
        if: env.FREE_UP_DISK == 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo swapoff /mnt/swapfile
          sudo rm -rf /mnt/swapfile
          sudo chmod 777 /mnt
          sudo mkdir -p -m 777 openwrt/build_dir /mnt/openwrt/dl /mnt/openwrt/staging_dir /mnt/openwrt/build_dir /mnt/openwrt/tmp /mnt/ccache
          ln -sf /mnt/openwrt/dl openwrt/dl
          ln -sf /mnt/openwrt/tmp openwrt/tmp
          ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir
          ln -sf /mnt/openwrt/build_dir openwrt/build_dir
          df -hT

      - name: Unzip artifact
        run: |
          cd /workdir && bsdtar -xzf build_dir.tar.gz -C /mnt/openwrt/build_dir --strip-components=3 && rm build_dir.tar.gz
          cd /workdir && bsdtar -xzf dl.tar.gz -C /mnt/openwrt/dl --strip-components=3 && rm dl.tar.gz
          cd /workdir && bsdtar -xzf staging_dir.tar.gz -C /mnt/openwrt/staging_dir --strip-components=3 && rm staging_dir.tar.gz
          cd /workdir && bsdtar -xzf tmp.tar.gz -C /mnt/openwrt/tmp --strip-components=3 && rm tmp.tar.gz

      - name: Move files
        run: |
          # 使用rsync同步目录并清理原目录
          rsync -av /workdir/openwrt/dl/ /mnt/openwrt/dl/ && rm -rf /workdir/openwrt/dl
          rsync -av /workdir/openwrt/tmp/ /mnt/openwrt/tmp/ && rm -rf /workdir/openwrt/tmp
          rsync -av /workdir/openwrt/build_dir/ /mnt/openwrt/build_dir/ && rm -rf /workdir/openwrt/build_dir
          rsync -av /workdir/openwrt/staging_dir/ /mnt/openwrt/staging_dir/ && rm -rf /workdir/openwrt/staging_dir
          # 创建符号链接保持路径映射
          ln -sf /mnt/openwrt/dl /workdir/openwrt/dl
          ln -sf /mnt/openwrt/tmp /workdir/openwrt/tmp
          ln -sf /mnt/openwrt/build_dir /workdir/openwrt/build_dir
          ln -sf /mnt/openwrt/staging_dir /workdir/openwrt/staging_dir
          df -hT

      - name: Fix kernel config missing issue
        env:
          CC: "ccache gcc"
          CXX: "ccache g++"
        run: |
           cd openwrt
           # 从配置文件中获取 Linux 内核版本号
           LINUX_VERSION=$(grep '^CONFIG_LINUX_' .config | sed -r 's/^CONFIG_LINUX_([0-9\.]+)=y/\1/')
           KERNEL_CONFIG_DIR="build_dir/target-x86_64_musl/linux-x86_64/linux-${LINUX_VERSION}"
           # 确保 kernel 配置文件存在
           if [ ! -f "${KERNEL_CONFIG_DIR}/.config" ]; then
           echo "Kernel .config 文件缺失，尝试重新生成"
           make target/linux/clean
           make package/linux/clean
           make -j$(($(nproc) + 1)) target/linux/compile CC="$CC" CXX="$CXX"
           make -j$(($(nproc) + 1)) package/linux/compile CC="$CC" CXX="$CXX"
           ccache -s
           fi
          
      - name: Multi-thread compile with CCache
        id: Multi-thread
        env:
          CC: "ccache gcc"
          CXX: "ccache g++"
        run: |
          cd openwrt
          echo -e "$(($(nproc) + 1)) thread compile with CCache"
          make package/compile -j$(($(nproc) + 1)) BUILD_PACKAGES=y CC="$CC" CXX="$CXX"
          make package/index -j$(($(nproc) + 1)) CC="$CC" CXX="$CXX"
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          ccache -s
          df -hT
          
      - name: Single-thread compile
        id: Single-thread
        if: failure()
        env:
          CC: "ccache gcc"
          CXX: "ccache g++"
        run: |
          cd openwrt
          make -j1 package/compile BUILD_PACKAGES=y V=s CC="$CC" CXX="$CXX"
          make -j1 package/index V=s CC="$CC" CXX="$CXX"
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          ccache -s

      - name: Compress directory
        run: |
          sudo rm -rf /workdir/openwrt/dl /workdir/openwrt/tmp /workdir/openwrt/build_dir /workdir/openwrt/staging_dir
          bsdtar -czlf staging_dir.tar.gz /mnt/openwrt/staging_dir && sudo rm -rf /mnt/openwrt/staging_dir
          bsdtar -czlf build_dir.tar.gz /mnt/openwrt/build_dir && sudo rm -rf /mnt/openwrt/build_dir
          bsdtar -czlf tmp.tar.gz /mnt/openwrt/tmp && sudo rm -rf /mnt/openwrt/tmp
          bsdtar -czlf dl.tar.gz /mnt/openwrt/dl && sudo rm -rf /mnt/openwrt/dl
          bsdtar -czlf openwrt.tar.gz /workdir/openwrt && sudo rm -rf /workdir/openwrt
          df -hT

      - name: Store build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build2-build-output
          path: |
            staging_dir.tar.gz
            build_dir.tar.gz
            dl.tar.gz
            tmp.tar.gz
            openwrt.tar.gz

      - name: WeChat notification
        if: steps.final-compile.outputs.status == 'success' && !cancelled() && job.status == 'success'
        run: |
          curl -s -o /dev/null http://www.pushplus.plus/send --data "token=${{ secrets.PUSHPLUS_TOKEN }}&content=OpenWrt第三部分编译成功"
          # curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=OpenWrt第三部分编译成功

      - name: WeChat notification
        if: failure() && !cancelled()
        run: |
          curl -s -o /dev/null http://www.pushplus.plus/send --data "token=${{ secrets.PUSHPLUS_TOKEN }}&content=OpenWrt第三部分编译失败"
          # curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=OpenWrt第三部分编译失败

  uploads:
    needs: build2
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker image prune -a -f
          sudo -E rm -rf /usr/share/dotnet /etc/apt/sources.list.d/* /var/cache/apt/archives /usr/local/share/boost /usr/local/go* /usr/local/lib/android /opt/ghc
          sudo -E apt-get -y purge azure-cli* docker* ghc* llvm* firefox google* dotnet* mysql*
          sudo mv ${GITHUB_WORKSPACE}/sources-24.04.list /etc/apt/sources.list.d/
          sudo -E apt-get update -y
          sudo -E apt-get full-upgrade -y
          sudo -E apt-get install -y --allow-downgrades build-essential flex bison cmake clang g++ gawk gcc-multilib g++-multilib gettext git-man=1:2.43.* git gnutls-dev libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch upx-ucl autoconf automake curl asciidoc binutils bzip2 lib32gcc-s1 libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils haveged scons libpython3-dev rename qemu-utils jq libarchive-tools
          sudo -E apt-get autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          sudo chmod 777 /workdir
          df -hT

      # 新增 CCache 初始化
      - name: Setup CCache
        run: |
          sudo mkdir -p $CCACHE_DIR
          sudo chmod 777 $CCACHE_DIR
          ccache --set-config=max_size=$CCACHE_MAXSIZE
          ccache -s

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build2-build-output
          path: /workdir

      - name: WeChat notification
        working-directory: /workdir
        run: |
          cd /workdir
          mkdir -p openwrt
          bsdtar -xzf openwrt.tar.gz -C /workdir/openwrt --strip-components=2 && rm openwrt.tar.gz
          ln -sf /workdir/openwrt ${{ github.workspace }}/openwrt
          curl -s -o /dev/null http://www.pushplus.plus/send --data "token=${{ secrets.PUSHPLUS_TOKEN }}&content=OpenWrt开始最终编译"
          # curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=OpenWrt开始最终编译

      - name: Free up disk space
        if: env.FREE_UP_DISK == 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo swapoff /mnt/swapfile
          sudo rm -rf /mnt/swapfile
          sudo chmod 777 /mnt
          sudo mkdir -p -m 777 openwrt/build_dir /mnt/openwrt/dl /mnt/openwrt/staging_dir /mnt/openwrt/build_dir /mnt/openwrt/tmp
          ln -sf /mnt/openwrt/dl openwrt/dl
          ln -sf /mnt/openwrt/tmp openwrt/tmp
          ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir
          ln -sf /mnt/openwrt/build_dir openwrt/build_dir
          df -hT

      - name: Unzip artifact
        run: |
          cd /workdir && bsdtar -xzf build_dir.tar.gz -C /mnt/openwrt/build_dir --strip-components=3 && rm build_dir.tar.gz
          cd /workdir && bsdtar -xzf dl.tar.gz -C /mnt/openwrt/dl --strip-components=3 && rm dl.tar.gz
          cd /workdir && bsdtar -xzf staging_dir.tar.gz -C /mnt/openwrt/staging_dir --strip-components=3 && rm staging_dir.tar.gz
          cd /workdir && bsdtar -xzf tmp.tar.gz -C /mnt/openwrt/tmp --strip-components=3 && rm tmp.tar.gz

      - name: Move files
        run: |
          # 使用rsync同步目录并清理原目录
          rsync -av /workdir/openwrt/dl/ /mnt/openwrt/dl/ && rm -rf /workdir/openwrt/dl
          rsync -av /workdir/openwrt/tmp/ /mnt/openwrt/tmp/ && rm -rf /workdir/openwrt/tmp
          rsync -av /workdir/openwrt/build_dir/ /mnt/openwrt/build_dir/ && rm -rf /workdir/openwrt/build_dir
          rsync -av /workdir/openwrt/staging_dir/ /mnt/openwrt/staging_dir/ && rm -rf /workdir/openwrt/staging_dir
          # 创建符号链接保持路径映射
          ln -sf /mnt/openwrt/dl /workdir/openwrt/dl
          ln -sf /mnt/openwrt/tmp /workdir/openwrt/tmp
          ln -sf /mnt/openwrt/build_dir /workdir/openwrt/build_dir
          ln -sf /mnt/openwrt/staging_dir /workdir/openwrt/staging_dir
          df -hT

      - name: Final compile with CCache
        id: final-compile
        env:
          CC: "ccache gcc"
          CXX: "ccache g++"
        run: |
          cd openwrt
          # 仅执行必要的安装步骤
          make world -j$(($(nproc) + 1)) CC="$CC" CXX="$CXX"
          # make package/install -j$(($(nproc) + 1)) V=s CC="$CC" CXX="$CXX"
          # make target/install -j$(($(nproc) + 1)) V=s CC="$CC" CXX="$CXX"
          
          # 获取设备名称
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          
          # 获取固件路径
          FIRMWARE_PATH=$(find bin/targets -type f \( -name '*.bin' -o -name '*.img' -o -name '*.gz' \) -print -quit | xargs dirname)
          echo "FIRMWARE_PATH=$FIRMWARE_PATH" >> $GITHUB_ENV
          
          ccache -s
          df -hT
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Single-thread compile
        id: Single-thread
        if: failure()
        env:
          CC: "ccache gcc"
          CXX: "ccache g++"
        run: |
          cd openwrt
          make world -j1 V=s CC="$CC" CXX="$CXX"
          # make -j1 package/install V=s CC="$CC" CXX="$CXX"
          # make -j1 target/install V=s CC="$CC" CXX="$CXX"
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          ccache -s

      - name: Upload packages
        uses: actions/upload-artifact@v4
        if: steps.final-compile.outputs.status == 'success' || steps.Single-thread.outputs.status == 'success'
        with:
          name: OpenWrt_packages${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin/packages

      - name: Upload openwrt directory
        uses: actions/upload-artifact@v4
        if: steps.final-compile.outputs.status == 'success' || steps.Single-thread.outputs.status == 'success'
        with:
          name: OpenWrt_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize files
        id: organize
        if: env.UPLOAD_FILES == 'true' && !cancelled()
        shell: bash
        run: |
          echo "status=success" >> $GITHUB_OUTPUT
          zip -r "OpenWrt_packages${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}.zip" openwrt/bin/packages
          rm -rf openwrt/bin/packages
          tar -czf "OpenWrt_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}.tar.gz" openwrt/bin

      - name: Upload files to cowtransfer
        id: cowtransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 99 --hash --no-progress *.zip 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
          echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

      - name: Upload files to WeTransfer
        id: wetransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress *.zip 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload files to release
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: |
            OpenWrt_packages${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}.zip
            OpenWrt_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}.tar.gz

      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 5
          keep_minimum_runs: 10

      - name: Delete old releases
        uses: ophub/delete-releases-workflows@main
        with:
          delete_releases: true
          releases_keep_latest: 5       # 保留最新的 5 个版本
          delete_tags: true            # 是否删除关联 tag，默认 false
          GH_TOKEN: ${{ github.token }}

      - name: WeChat notification - Final Result
        if: steps.final-compile.outputs.status == 'success' || steps.Single-thread.outputs.status == 'success' && !cancelled() && job.status == 'success'
        run: |
          curl -s -o /dev/null http://www.pushplus.plus/send --data "token=${{ secrets.PUSHPLUS_TOKEN }}&content=OpenWrt编译成功"
          # curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=OpenWrt编译成功

      - name: WeChat notification - Final Failure
        if: failure() && !cancelled()
        run: |
          curl -s -o /dev/null http://www.pushplus.plus/send --data "token=${{ secrets.PUSHPLUS_TOKEN }}&content=OpenWrt编译失败"
          # curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=OpenWrt编译失败
